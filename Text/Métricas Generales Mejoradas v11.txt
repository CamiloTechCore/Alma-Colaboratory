<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Métricas Generales</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* General styles */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f4f7f6; /* Soft background */
            color: #333;
            line-height: 1.6;
            padding: 20px;
        }

        h3 {
            color: #1a237e; /* Dark blue for titles */
            margin-top: 20px;
            margin-bottom: 5px; /* Reduced margin to fit the note */
            border-bottom: 2px solid #e0e0e0; /* Subtle line */
            padding-bottom: 10px;
            display: flex;
            align-items: center;
            font-size: 1.6em;
            cursor: pointer; /* Indicate clickable */
            user-select: none; /* Prevent text selection on click */
        }

        h3 .icon {
            margin-right: 10px;
            color: #007bff; /* Accent color */
            transition: transform 0.3s ease; /* Smooth rotation for icon */
        }

        h3.collapsed .icon {
            transform: rotate(-90deg); /* Rotate icon when collapsed */
        }

        /* Bell icon animation */
        .bell-icon {
            margin-left: 10px; /* Space after title */
            color: #ffc107; /* Yellow color for bell */
            font-size: 1.2em;
            animation: shake 2s cubic-bezier(.36,.07,.19,.97) infinite; /* Shaking animation */
            transform-origin: top center; /* Shake from the top */
            border: 1px solid blue; /* Blue border */
            padding: 2px; /* Padding inside border */
            border-radius: 4px; /* Slightly rounded corners for border */
        }

        @keyframes shake {
            0% { transform: rotate(0deg); }
            15% { transform: rotate(5deg); }
            30% { transform: rotate(-5deg); }
            45% { transform: rotate(5deg); }
            60% { transform: rotate(-5deg); }
            75% { transform: rotate(2deg); }
            85% { transform: rotate(-2deg); }
            92% { transform: rotate(1deg); }
            100% { transform: rotate(0deg); }
        }

        /* Click to view note */
        .click-note {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 15px;
            text-align: left;
            padding-left: 30px; /* Align with title text */
        }


        /* --- GENERAL METRICS STYLES --- */
        .metrics-section {
            margin-top: 20px;
            padding-top: 15px;
        }

        /* Collapsible content wrapper */
        .collapsible-content {
            overflow: hidden;
            transition: max-height 0.5s ease-in-out, opacity 0.5s ease-in-out;
            max-height: 0; /* Initially collapsed */
            opacity: 0; /* Initially hidden */
        }

        .collapsible-content.expanded {
            max-height: 1000px; /* Large enough to show content when expanded */
            opacity: 1;
        }


        /* Filter container styles */
        .metrics-filters-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            border: 1px solid #e0e0e0;
            align-items: center;
        }

        .filter-group {
            flex: 1;
            min-width: 180px; /* Adjusted minimum width for filters */
        }

        .filter-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #343a40;
            font-size: 0.9em;
            display: flex;
            align-items: center;
            gap: 6px;
        }

         .filter-group label .icon {
             color: #555;
         }


        .filter-group select {
            width: 100%;
            padding: 8px 10px; /* Adjusted padding */
            border-radius: 5px;
            border: 1px solid #ced4da;
            font-size: 0.9em; /* Adjusted font size */
            box-sizing: border-box;
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
            background-color: #f8f9fa; /* Light background for select */
        }

        .filter-group select:focus {
            border-color: #007bff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }


        .metrics-display-container {
            display: flex;
            flex-wrap: wrap;
            gap: 15px; /* Reduced space between cards */
            justify-content: center; /* Center cards */
            padding: 15px;
            background-color: #ffffff; /* White background for container */
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08); /* Improved shadow */
        }

        .metric-card {
            background-color: #ffffff;
            padding: 15px; /* Reduced padding */
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05); /* Soft shadow */
            width: 220px; /* Reduced width for cards */
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            display: flex;
            flex-direction: column;
            align-items: center;
            border: 1px solid #e0e0e0; /* Subtle border */
        }

        .metric-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
        }

        .metric-card h4 {
            color: #3f51b5; /* Medium blue for card titles */
            margin-top: 0;
            margin-bottom: 8px; /* Reduced space */
            font-size: 1em; /* Slightly smaller font */
            font-weight: 600;
        }

        .metric-value {
            font-size: 1.8em; /* Adjusted font size */
            font-weight: bold;
            color: #007bff; /* Primary color */
            min-height: 1.5em; /* Ensure space */
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
        }

        /* Styles for loading spinner */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d; /* Gray */
            font-size: 0.9em;
        }

        .loading i {
            font-size: 1.1em;
            animation: spin 1.5s linear infinite; /* Spinner animation */
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* --- END GENERAL METRICS STYLES --- */
    </style>
</head>
<body>

<div id="generalMetricsSection" class="metrics-section">
    <h3 id="toggleGeneralMetrics">
        <i class="fas fa-chart-line icon"></i>Métricas Generales
        <i class="fas fa-bell bell-icon"></i> </h3>
    <p class="click-note">Haz click en el título para ver los indicadores.</p> <div id="generalMetricsContent" class="collapsible-content">
        <div class="metrics-filters-container">
            <div class="filter-group">
                <label for="teamFilter"><i class="fas fa-users icon"></i>Equipo:</label>
                <select id="teamFilter">
                    <option value="">Todos los Equipos</option>
                    </select>
            </div>
            <div class="filter-group">
                <label for="userFilter"><i class="fas fa-user icon"></i>Usuario:</label>
                <select id="userFilter">
                    <option value="">Todos los Usuarios</option>
                    </select>
            </div>
            <div class="filter-group">
                <label for="officeFilter"><i class="fas fa-building icon"></i>Oficina:</label>
                <select id="officeFilter">
                    <option value="">Todas las Oficinas</option>
                    </select>
            </div>
            <div class="filter-group">
                <label for="dateFilter"><i class="fas fa-calendar-alt icon"></i>Fecha:</label>
                <select id="dateFilter">
                     <option value="">Seleccionar Fecha</option>
                    </select>
            </div>
        </div>
        <div class="metrics-display-container">
            <div class="metric-card">
                <h4>Casos Asignados</h4>
                <div id="assignedCasesCount" class="metric-value">
                    <div class="loading"><i class="fas fa-spinner"></i></div> </div>
            </div>

            <div class="metric-card">
                <h4>Casos Cerrados</h4>
                <div id="closedCasesCount" class="metric-value">
                    <div class="loading"><i class="fas fa-spinner"></i></div> </div>
            </div>

            <div class="metric-card">
                 <h4>Casos Pendientes</h4>
                 <div id="pendingCasesCount" class="metric-value">
                       <div class="loading"><i class="fas fa-spinner"></i></div> </div>
             </div>

            <div class="metric-card">
                <h4>TMO</h4>
                <div id="tmoMetric" class="metric-value">
                      <div class="loading"><i class="fas fa-spinner"></i></div> </div>
            </div>

            <div class="metric-card">
                 <h4>Tiempo Gestión</h4>
                 <div id="tiempoGestionMetric" class="metric-value">
                   <div class="loading"><i class="fas fa-spinner"></i></div> </div>
             </div>

            <div class="metric-card">
                  <h4>Tiempo Inactivo</h4>
                  <div id="tiempoInactivoMetric" class="metric-value">
                       <div class="loading"><i class="fas fa-spinner"></i></div> </div>
              </div>

            </div>
    </div>
</div>

<script>
    document.getElementById('toggleGeneralMetrics').addEventListener('click', function() {
        const content = document.getElementById('generalMetricsContent');
        const icon = this.querySelector('.icon');
        const bellIcon = this.querySelector('.bell-icon');

        content.classList.toggle('expanded'); // Use expanded class
        this.classList.toggle('collapsed'); // Toggle collapsed class on h3 for icon rotation

        // Stop shaking animation when expanded
        if (content.classList.contains('expanded')) {
            bellIcon.style.animation = 'none';
        } else {
            bellIcon.style.animation = 'shake 2s cubic-bezier(.36,.07,.19,.97) infinite';
        }


        // Optional: Adjust max-height dynamically if needed, or rely on a large enough value
        if (content.classList.contains('expanded')) {
             // Set max-height to scrollHeight to enable transition
             content.style.maxHeight = content.scrollHeight + "px";
         } else {
             content.style.maxHeight = null; // Reset max-height to allow collapse
         }
    });

    // Placeholder function to simulate loading and updating metrics
    function updateGeneralMetrics(data) {
        // Example: update assigned cases after a delay
        const assignedCasesElement = document.getElementById('assignedCasesCount');
        assignedCasesElement.innerHTML = '<div class="loading"><i class="fas fa-spinner"></i></div>'; // Show spinner

        setTimeout(() => {
            assignedCasesElement.textContent = data.assignedCases; // Update with actual data
            // Update other metrics similarly
            document.getElementById('closedCasesCount').textContent = data.closedCases;
            document.getElementById('pendingCasesCount').textContent = data.pendingCases;
            document.getElementById('tmoMetric').textContent = data.tmo;
            document.getElementById('tiempoGestionMetric').textContent = data.tiempoGestion;
            document.getElementById('tiempoInactivoMetric').textContent = data.tiempoInactivo;
        }, 1000); // Simulate network delay
    }

    // Example usage (you would call this after fetching data based on filters)
    // document.getElementById('teamFilter').addEventListener('change', function() {
    //     const selectedTeam = this.value;
    //     // Fetch data based on selectedTeam and call updateGeneralMetrics
    //     // updateGeneralMetrics({ assignedCases: 150, closedCases: 120, ... });
    // });

    // Initial load simulation (will only be visible when expanded)
    // updateGeneralMetrics({ assignedCases: 150, closedCases: 120, pendingCases: 30, tmo: '05:30', tiempoGestion: '04:00', tiempoInactivo: '01:30' });

</script>

</body>
</html>


